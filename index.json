{
  "api/LibSodium.Net.Base64Encoding.html": {
    "href": "api/LibSodium.Net.Base64Encoding.html",
    "title": "Class Base64Encoding | LibSodium.Net",
    "summary": "Class Base64Encoding Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods for Base64 encoding and decoding. public static class Base64Encoding Inheritance object Base64Encoding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Base64ToBin(ReadOnlySpan<char>, Span<byte>, Base64Variant, string?) Decodes a Base64 string into a binary representation. public static Span<byte> Base64ToBin(ReadOnlySpan<char> b64, Span<byte> bin, Base64Variant variant, string? ignore = null) Parameters b64 ReadOnlySpan<char> The Base64 string to decode as a ReadOnlySpan. bin Span<byte> The span to store the decoded binary data. variant Base64Variant The Base64 variant to use. ignore string Characters to ignore during decoding. Returns Span<byte> A span containing the decoded binary data. Base64ToBin(string, Span<byte>, Base64Variant, string?) Decodes a Base64 string into a binary representation. public static Span<byte> Base64ToBin(string b64, Span<byte> bin, Base64Variant variant, string? ignore = null) Parameters b64 string The Base64 string to decode. bin Span<byte> The span to store the decoded binary data. variant Base64Variant The Base64 variant to use. ignore string Characters to ignore during decoding. Returns Span<byte> A span containing the decoded binary data. BinToBase64(ReadOnlySpan<byte>, Base64Variant) Encodes binary data into a Base64 string. public static string BinToBase64(ReadOnlySpan<byte> bin, Base64Variant variant) Parameters bin ReadOnlySpan<byte> The binary data to encode. variant Base64Variant The Base64 variant to use. Returns string A Base64 encoded string. BinToBase64(ReadOnlySpan<byte>, Span<char>, Base64Variant) Encodes binary data into a Base64 representation and stores it in a character span. public static Span<char> BinToBase64(ReadOnlySpan<byte> bin, Span<char> b64, Base64Variant variant) Parameters bin ReadOnlySpan<byte> The binary data to encode. b64 Span<char> The span to store the Base64 encoded data. variant Base64Variant The Base64 variant to use. Returns Span<char> A span containing the Base64 encoded data. GetBase64DecodedMaxLen(int) Calculates the maximum length of the decoded binary data from a Base64 string. public static int GetBase64DecodedMaxLen(int base64Len) Parameters base64Len int The length of the Base64 string. Returns int The maximum length of the decoded binary data. GetBase64EncodedLen(int, Base64Variant, bool) Calculates the length of the Base64 encoded string for a given binary length. public static int GetBase64EncodedLen(int binLen, Base64Variant variant, bool includeNullTerminator = true) Parameters binLen int The length of the binary data. variant Base64Variant The Base64 variant to use. includeNullTerminator bool Indicates whether to include a null terminator in the length calculation. Returns int The length of the Base64 encoded string."
  },
  "api/LibSodium.Net.Base64Variant.html": {
    "href": "api/LibSodium.Net.Base64Variant.html",
    "title": "Enum Base64Variant | LibSodium.Net",
    "summary": "Enum Base64Variant Namespace LibSodium.Net Assembly LibSodium.Net.dll Represents Base64 encoding variants. public enum Base64Variant Fields Original = 1 Original Base64 encoding variant. OriginalNoPadding = 3 Original Base64 encoding variant with no padding. UrlSafe = 5 URL safe Base64 encoding variant. UrlSafeNoPadding = 7 URL safe Base64 encoding variant with no padding."
  },
  "api/LibSodium.Net.HexEncoding.html": {
    "href": "api/LibSodium.Net.HexEncoding.html",
    "title": "Class HexEncoding | LibSodium.Net",
    "summary": "Class HexEncoding Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods for encoding and decoding hexadecimal strings and byte buffers. public static class HexEncoding Inheritance object HexEncoding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BinToHex(ReadOnlySpan<byte>) Converts a byte buffer to a hexadecimal string in constant time for a given size. public static string BinToHex(ReadOnlySpan<byte> bin) Parameters bin ReadOnlySpan<byte> The byte buffer to convert. Returns string A hexadecimal string representation of the byte buffer. BinToHex(ReadOnlySpan<byte>, Span<char>) Converts a byte buffer to a hexadecimal string using a provided character span. public static Span<char> BinToHex(ReadOnlySpan<byte> bin, Span<char> hex) Parameters bin ReadOnlySpan<byte> The byte buffer to convert. hex Span<char> The span to write the hexadecimal string into. Returns Span<char> A span containing the hexadecimal string representation. HexToBin(ReadOnlySpan<char>, Span<byte>, string?) Converts a span of characters representing a hexadecimal string to a byte buffer. public static Span<byte> HexToBin(ReadOnlySpan<char> hex, Span<byte> bin, string? ignore = null) Parameters hex ReadOnlySpan<char> The span of characters representing the hexadecimal string. bin Span<byte> The span to write the byte buffer into. ignore string Optional characters to ignore during conversion. Returns Span<byte> A span containing the converted byte buffer. HexToBin(string, Span<byte>, string?) Converts a hexadecimal string to a byte buffer. public static Span<byte> HexToBin(string hex, Span<byte> bin, string? ignore = null) Parameters hex string The hexadecimal string to convert. bin Span<byte> The span to write the byte buffer into. ignore string Optional characters to ignore during conversion. Returns Span<byte> A span containing the converted byte buffer."
  },
  "api/LibSodium.Net.LibraryInitializer.html": {
    "href": "api/LibSodium.Net.LibraryInitializer.html",
    "title": "Class LibraryInitializer | LibSodium.Net",
    "summary": "Class LibraryInitializer Namespace LibSodium.Net Assembly LibSodium.Net.dll Static class that manages the initialization and configuration of libsodium. public static class LibraryInitializer Inheritance object LibraryInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInitialized Gets a value indicating whether the library has been initialized public static bool IsInitialized { get; } Property Value bool Methods EnsureInitialized() Ensures that the libsodium library is initialized. public static void EnsureInitialized()"
  },
  "api/LibSodium.Net.LibraryVersion.html": {
    "href": "api/LibSodium.Net.LibraryVersion.html",
    "title": "Class LibraryVersion | LibSodium.Net",
    "summary": "Class LibraryVersion Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods to retrieve the version information of the Sodium library. public static class LibraryVersion Inheritance object LibraryVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMajor() Gets the major version number of the Sodium library. public static int GetMajor() Returns int The major version number as an integer. GetMinor() Gets the minor version number of the Sodium library. public static int GetMinor() Returns int The minor version number as an integer. GetString() Gets the version string of the Sodium library. public static string? GetString() Returns string The version string as a string, or null if the string could not be retrieved."
  },
  "api/LibSodium.Net.RandomGenerator.html": {
    "href": "api/LibSodium.Net.RandomGenerator.html",
    "title": "Class RandomGenerator | LibSodium.Net",
    "summary": "Class RandomGenerator Namespace LibSodium.Net Assembly LibSodium.Net.dll Static class for random number generation. public static class RandomGenerator Inheritance object RandomGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SeedLen The length of the seed used for deterministic random byte generation. public const int SeedLen = 32 Field Value int Methods Close() Closes the random number generator. public static void Close() Exceptions SodioException Thrown when randombytes_close() fails. Fill(Span<byte>) Fills the specified buffer with random bytes. public static void Fill(Span<byte> buffer) Parameters buffer Span<byte> The buffer to fill with random bytes. FillDeterministic(Span<byte>, ReadOnlySpan<byte>) Fills the specified buffer with deterministic random bytes based on the provided seed. It produces the same sequence of random bytes for the same seed. public static void FillDeterministic(Span<byte> buffer, ReadOnlySpan<byte> seed) Parameters buffer Span<byte> The buffer to fill with deterministic random bytes. seed ReadOnlySpan<byte> The seed used for deterministic random byte generation. Exceptions ArgumentException Thrown when the seed length is not equal to SeedLen. GetUInt32() Gets a random unsigned 32-bit integer. public static uint GetUInt32() Returns uint A random unsigned 32-bit integer. GetUInt32(uint) Gets a random unsigned 32-bit integer less than the specified upper bound. public static uint GetUInt32(uint upperBound) Parameters upperBound uint The upper bound (exclusive) for the random number. Returns uint A random unsigned 32-bit integer less than upperBound. Stir() Stirs the random number generator to ensure randomness. public static void Stir()"
  },
  "api/LibSodium.Net.SecretBox.html": {
    "href": "api/LibSodium.Net.SecretBox.html",
    "title": "Class SecretBox | LibSodium.Net",
    "summary": "Class SecretBox Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides static methods for authenticated symmetric encryption and decryption using the Sodium secretbox primitives, specifically the XSalsa20 stream cipher and Poly1305 MAC for authentication. These methods offer combined encryption/authentication and detached encryption/authentication, with variations for handling nonces and Message Authentication Codes (MACs) within or separate from the ciphertext. public static class SecretBox Inheritance object SecretBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields KeyLen Represents the length of the encryption key in bytes. public const int KeyLen = 32 Field Value int MacLen represents the length of the Message Authentication Code (MAC) in bytes public const int MacLen = 16 Field Value int NonceLen Represents the length of the nonce (number used once) in bytes. public const int NonceLen = 24 Field Value int Methods DecryptCombined(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Decrypts the provided ciphertext, which begins with the nonce and Message Authentication Code (MAC), using the specified key, writing the resulting plaintext to the provided buffer. public static Span<byte> DecryptCombined(Span<byte> plaintext, ReadOnlySpan<byte> ciphertext, ReadOnlySpan<byte> key) Parameters plaintext Span<byte> The buffer to receive the decrypted plaintext. Must be at least ciphertext length minus MacLen and NonceLen bytes. ciphertext ReadOnlySpan<byte> The ciphertext data to decrypt, which begins with the nonce and MAC. Must be at least MacLen + NonceLen bytes in length. key ReadOnlySpan<byte> The decryption key. Must be KeyLen bytes in length. Returns Span<byte> A span referencing the beginning of the plaintext buffer, containing the decrypted plaintext. Exceptions ArgumentException Thrown when: The plaintext buffer is too small. The ciphertext buffer is too small. The key length is incorrect. SodioException Thrown when decryption or verification fails. DecryptCombined(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Decrypts the provided ciphertext, which has the Message Authentication Code (MAC) prepended, using the specified key and nonce, writing the resulting plaintext to the provided buffer. public static Span<byte> DecryptCombined(Span<byte> plaintext, ReadOnlySpan<byte> ciphertext, ReadOnlySpan<byte> key, ReadOnlySpan<byte> nonce) Parameters plaintext Span<byte> The buffer to receive the decrypted plaintext. Must be at least ciphertext length minus MacLen bytes. ciphertext ReadOnlySpan<byte> The ciphertext data to decrypt, which includes the MAC prepended. Must be at least MacLen bytes in length. key ReadOnlySpan<byte> The decryption key. Must be KeyLen bytes in length. nonce ReadOnlySpan<byte> The nonce (number used once) for decryption. Must be NonceLen bytes in length. Returns Span<byte> A span referencing the beginning of the plaintext buffer, containing the decrypted plaintext. Exceptions ArgumentException Thrown when: The plaintext buffer is too small. The ciphertext buffer is too small. The key length is incorrect. The nonce length is incorrect. SodioException Thrown when decryption or verification fails. DecryptDetached(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Decrypts the provided ciphertext, which starts with the nonce, using the specified key and Message Authentication Code (MAC), writing the resulting plaintext to the provided buffer. public static Span<byte> DecryptDetached(Span<byte> plaintext, ReadOnlySpan<byte> ciphertext, ReadOnlySpan<byte> key, ReadOnlySpan<byte> mac) Parameters plaintext Span<byte> The buffer to receive the decrypted plaintext. Must be at least ciphertext length minus NonceLen bytes. ciphertext ReadOnlySpan<byte> The ciphertext data to decrypt, which starts with the nonce. Must be at least NonceLen bytes in length. key ReadOnlySpan<byte> The decryption key. Must be KeyLen bytes in length. mac ReadOnlySpan<byte> The Message Authentication Code (MAC) for verification. Must be MacLen bytes in length. Returns Span<byte> A span referencing the beginning of the plaintext buffer, containing the decrypted plaintext. Exceptions ArgumentException Thrown when: The plaintext buffer is too small. The mac length is incorrect. The key length is incorrect. The ciphertext length is too small. SodioException Thrown when decryption or verification fails. DecryptDetached(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Decrypts the provided ciphertext using the specified key, nonce, and Message Authentication Code (MAC), writing the resulting plaintext to the provided buffer. public static Span<byte> DecryptDetached(Span<byte> plaintext, ReadOnlySpan<byte> ciphertext, ReadOnlySpan<byte> key, ReadOnlySpan<byte> mac, ReadOnlySpan<byte> nonce) Parameters plaintext Span<byte> The buffer to receive the decrypted plaintext. Must be at least the same size as ciphertext. ciphertext ReadOnlySpan<byte> The ciphertext data to decrypt. key ReadOnlySpan<byte> The decryption key. Must be KeyLen bytes in length. mac ReadOnlySpan<byte> The Message Authentication Code (MAC) for verification. Must be MacLen bytes in length. nonce ReadOnlySpan<byte> The nonce (number used once) for decryption. Must be NonceLen bytes in length. Returns Span<byte> A span referencing the beginning of the plaintext buffer, containing the decrypted plaintext. Exceptions ArgumentException Thrown when: The plaintext buffer is too small. The mac length is incorrect. The nonce length is incorrect. The key length is incorrect. SodioException Thrown when decryption or verification fails. EncryptCombined(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Encrypts the provided plaintext using the specified key and a randomly generated nonce, writing the nonce, Message Authentication Code (MAC), and encrypted data to the provided ciphertext buffer. public static Span<byte> EncryptCombined(Span<byte> ciphertext, ReadOnlySpan<byte> plaintext, ReadOnlySpan<byte> key) Parameters ciphertext Span<byte> The buffer to receive the nonce, MAC, and encrypted data. Must be at least plaintext length plus MacLen and NonceLen bytes. plaintext ReadOnlySpan<byte> The plaintext data to encrypt. key ReadOnlySpan<byte> The encryption key. Must be KeyLen bytes in length. Returns Span<byte> A span referencing the beginning of the ciphertext buffer, containing the nonce, MAC, and then the encrypted data in that order. Exceptions ArgumentException Thrown when: The ciphertext buffer is too small. The key length is incorrect. SodioException Thrown when the underlying encryption operation fails. EncryptCombined(Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Encrypts the provided plaintext using the specified key and nonce, writing the resulting ciphertext, including the Message Authentication Code (MAC), to the provided ciphertext buffer. public static Span<byte> EncryptCombined(Span<byte> ciphertext, ReadOnlySpan<byte> plaintext, ReadOnlySpan<byte> key, ReadOnlySpan<byte> nonce) Parameters ciphertext Span<byte> The buffer to receive the encrypted data, including the MAC. Must be at least plaintext length plus MacLen bytes. plaintext ReadOnlySpan<byte> The plaintext data to encrypt. key ReadOnlySpan<byte> The encryption key. Must be KeyLen bytes in length. nonce ReadOnlySpan<byte> The nonce (number used once) for encryption. Must be NonceLen bytes in length. Returns Span<byte> A span referencing the beginning of the ciphertext buffer, containing the MAC followed by the encrypted plaintext. Exceptions ArgumentException Thrown when: The ciphertext buffer is too small. The key length is incorrect. The nonce length is incorrect. SodioException Thrown when the underlying encryption operation fails. EncryptDetached(Span<byte>, Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Encrypts the provided plaintext using the specified key and a randomly generated nonce, producing a detached Message Authentication Code (MAC) and writing the nonce followed by the encrypted plaintext to the ciphertext buffer. public static Span<byte> EncryptDetached(Span<byte> ciphertext, Span<byte> mac, ReadOnlySpan<byte> plaintext, ReadOnlySpan<byte> key) Parameters ciphertext Span<byte> The buffer to receive the randomly generated nonce followed by the encrypted plaintext. Must be at least plaintext length plus NonceLen bytes. mac Span<byte> The buffer to receive the generated Message Authentication Code (MAC). Must be MacLen bytes in length. plaintext ReadOnlySpan<byte> The plaintext data to encrypt. key ReadOnlySpan<byte> The encryption key. Must be KeyLen bytes in length. Returns Span<byte> A span referencing the beginning of the ciphertext buffer, containing the nonce followed by the encrypted plaintext. Exceptions ArgumentException Thrown when: The ciphertext buffer is too small. The mac buffer has an incorrect length. The key buffer has an incorrect length. SodioException Thrown when the encryption operation fails. EncryptDetached(Span<byte>, Span<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Encrypts the provided plaintext using the specified key and nonce, producing a detached Message Authentication Code (MAC) and writing the encrypted plaintext to the ciphertext buffer. public static Span<byte> EncryptDetached(Span<byte> ciphertext, Span<byte> mac, ReadOnlySpan<byte> plaintext, ReadOnlySpan<byte> key, ReadOnlySpan<byte> nonce) Parameters ciphertext Span<byte> The buffer to receive the encrypted plaintext. Must be at least the same size as plaintext. mac Span<byte> The buffer to receive the generated Message Authentication Code (MAC). Must be MacLen bytes in length. plaintext ReadOnlySpan<byte> The plaintext data to encrypt. key ReadOnlySpan<byte> The encryption key. Must be KeyLen bytes in length. nonce ReadOnlySpan<byte> The nonce (number used once) for encryption. Must be NonceLen bytes in length. Returns Span<byte> A span referencing the beginning of the ciphertext buffer, containing the encrypted plaintext. Exceptions ArgumentException Thrown when: The ciphertext buffer is too small. The mac buffer is the incorrect length. The nonce length is incorrect. The key length is incorrect. SodioException Thrown when the encryption operation fails."
  },
  "api/LibSodium.Net.SecureBigUnsignedInteger.html": {
    "href": "api/LibSodium.Net.SecureBigUnsignedInteger.html",
    "title": "Class SecureBigUnsignedInteger | LibSodium.Net",
    "summary": "Class SecureBigUnsignedInteger Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods for working with arbitrary large little endian big unsigned integers in a secure way (constant time for a given length) public static class SecureBigUnsignedInteger Inheritance object SecureBigUnsignedInteger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(Span<byte>, ReadOnlySpan<byte>) Adds two byte buffers representing big unsigned integers in constant time, storing the result in the second buffer public static void Add(Span<byte> a, ReadOnlySpan<byte> b) Parameters a Span<byte> The first byte buffer representing a big unsigned integer. b ReadOnlySpan<byte> The second byte buffer representing a big unsigned integer. It receives the result. Compare(ReadOnlySpan<byte>, ReadOnlySpan<byte>) Compares two byte buffers representing big unsigned integers. public static int Compare(ReadOnlySpan<byte> b1, ReadOnlySpan<byte> b2) Parameters b1 ReadOnlySpan<byte> The first byte buffer. b2 ReadOnlySpan<byte> The second byte buffer. Returns int A negative number if b1 is less than b2, zero if they are equal, and a positive number if b1 is greater than b2. Equals(ReadOnlySpan<byte>, ReadOnlySpan<byte>) Compares two byte buffers for equality in constant time. public static bool Equals(ReadOnlySpan<byte> b1, ReadOnlySpan<byte> b2) Parameters b1 ReadOnlySpan<byte> First buffer to compare. b2 ReadOnlySpan<byte> Second buffer to compare. Returns bool True if the buffers are equal, false otherwise. Increment(Span<byte>) Increments the given byte buffer representing a big unsigned integer by 1. public static void Increment(Span<byte> number) Parameters number Span<byte> The byte buffer to increment. Increment(Span<byte>, ulong) Increments the given byte buffer representing a big unsigned integer by a specified value. public static void Increment(Span<byte> number, ulong increment) Parameters number Span<byte> The byte buffer representing a big unsigned integer to increment. increment ulong The value to increment by. IsZero(ReadOnlySpan<byte>) Checks if the given byte buffer is zero. public static bool IsZero(ReadOnlySpan<byte> b) Parameters b ReadOnlySpan<byte> The byte buffer to check. Returns bool True if the byte buffer is zero, false otherwise. Subtract(Span<byte>, ReadOnlySpan<byte>) Subtracts one byte buffer from another representing big unsigned integers. public static void Subtract(Span<byte> subtrahend, ReadOnlySpan<byte> minuend) Parameters subtrahend Span<byte> The byte buffer to subtract from. minuend ReadOnlySpan<byte> The byte buffer to subtract."
  },
  "api/LibSodium.Net.SecureMemory-1.html": {
    "href": "api/LibSodium.Net.SecureMemory-1.html",
    "title": "Class SecureMemory<T> | LibSodium.Net",
    "summary": "Class SecureMemory<T> Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides a secure unmanaged memory buffer for unmanaged types, using libsodium for memory protection. This class encapsulates secure memory allocation, read-only protection, and zeroing. public sealed class SecureMemory<T> : IDisposable where T : unmanaged Type Parameters T The unmanaged type of elements in the secure memory buffer. Inheritance object SecureMemory<T> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SecureMemory(int) Initializes a new instance of the SecureMemory<T> class with the specified length. public SecureMemory(int length) Parameters length int The number of elements of type T to allocate. Exceptions SodioException Thrown if memory allocation fails. Properties IsDisposed Gets a value indicating whether the object has been disposed. public bool IsDisposed { get; } Property Value bool IsReadOnly Gets a value indicating whether the memory region is read-only. public bool IsReadOnly { get; } Property Value bool Length Gets the length of the secure unmanaged memory buffer, in number of elements of type T. public int Length { get; } Property Value int Methods AsReadOnlySpan() Gets a ReadOnlySpan<T> representing the secure unmanaged memory buffer. public ReadOnlySpan<T> AsReadOnlySpan() Returns ReadOnlySpan<T> Remarks While this method returns a new ReadOnlySpan<T> instance on each call, all returned spans represent the same underlying memory region. Exceptions ObjectDisposedException Thrown if the object has been disposed. AsSpan() Gets a Span<T> representing the secure unmanaged memory buffer. public Span<T> AsSpan() Returns Span<T> Remarks While this method returns a new Span<T> instance on each call, all returned spans represent the same underlying memory region. Modifications made through one span will be visible through any other span obtained from this instance. Exceptions ObjectDisposedException Thrown if the object has been disposed. InvalidOperationException Thrown if the memory region is read-only. Dispose() Releases all resources used by the SecureMemory<T> object, including the allocated unmanaged secure memory. public void Dispose() ~SecureMemory() Finalizes an instance of the SecureMemory<T> class. protected ~SecureMemory() MemZero() Fills the secure unmanaged memory buffer with zeros, effectively erasing its contents. public void MemZero() Exceptions ObjectDisposedException Thrown if the object has been disposed. ProtectReadOnly() Marks the secure unmanaged memory buffer as read-only. public void ProtectReadOnly() Exceptions ObjectDisposedException Thrown if the object has been disposed. SodioException Thrown if setting the memory to read-only fails. ProtectReadWrite() Marks the secure unmanaged memory buffer as read-write. public void ProtectReadWrite() Exceptions ObjectDisposedException Thrown if the object has been disposed. SodioException Thrown if setting the memory to read-write fails."
  },
  "api/LibSodium.Net.SecureMemory.html": {
    "href": "api/LibSodium.Net.SecureMemory.html",
    "title": "Class SecureMemory | LibSodium.Net",
    "summary": "Class SecureMemory Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods for secure memory management using libsodium. These methods help protect sensitive data from being swapped to disk or accessed by other processes. public static class SecureMemory Inheritance object SecureMemory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(int) Creates a SecureMemory<T> holding the specified number of items of given type public static SecureMemory<T> Create<T>(int length) where T : unmanaged Parameters length int The number of items Returns SecureMemory<T> Type Parameters T The type of items MemLock(ReadOnlySpan<byte>) Locks an unmanaged memory buffer, preventing it from being swapped to disk. public static void MemLock(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> The span representing the unmanaged memory to lock. Exceptions SodioException Thrown if locking the memory fails. MemLock<T>(ReadOnlySpan<T>) Locks an unmanaged memory buffer, preventing it from being swapped to disk. public static void MemLock<T>(ReadOnlySpan<T> buffer) where T : unmanaged Parameters buffer ReadOnlySpan<T> The span representing the unmanaged memory to lock. Type Parameters T Exceptions SodioException Thrown if locking the memory fails. MemUnlock(ReadOnlySpan<byte>) Unlocks an unmanaged memory buffer, allowing it to be swapped to disk if necessary. public static void MemUnlock(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> The span of bytes to unlock. Exceptions SodioException Thrown if unlocking the memory fails. MemUnlock<T>(ReadOnlySpan<T>) Unlocks an unmanaged memory buffer, allowing it to be swapped to disk if necessary. public static void MemUnlock<T>(ReadOnlySpan<T> buffer) where T : unmanaged Parameters buffer ReadOnlySpan<T> The span of bytes to unlock. Type Parameters T Exceptions SodioException Thrown if unlocking the memory fails. MemZero(byte[]) Fills a buffer with zeros, effectively erasing its contents. public static void MemZero(byte[] buffer) Parameters buffer byte[] The span of bytes to zero out. MemZero(Span<byte>) Fills a buffer with zeros, effectively erasing its contents. public static void MemZero(Span<byte> buffer) Parameters buffer Span<byte> The span of bytes to zero out. MemZero<T>(Span<T>) Fills a buffer with zeros, effectively erasing its contents. public static void MemZero<T>(Span<T> buffer) where T : unmanaged Parameters buffer Span<T> The span of bytes to zero out. Type Parameters T MemZero<T>(T[]) Fills a buffer with zeros, effectively erasing its contents. public static void MemZero<T>(T[] buffer) where T : unmanaged Parameters buffer T[] The span of bytes to zero out. Type Parameters T"
  },
  "api/LibSodium.Net.SecurePadding.html": {
    "href": "api/LibSodium.Net.SecurePadding.html",
    "title": "Class SecurePadding | LibSodium.Net",
    "summary": "Class SecurePadding Namespace LibSodium.Net Assembly LibSodium.Net.dll Provides methods for padding and unpadding byte buffers to ensure they meet specified block sizes. public static class SecurePadding Inheritance object SecurePadding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Pad(Span<byte>, int, int) Pads the given buffer to the specified block size. public static Span<byte> Pad(Span<byte> buffer, int unpaddedLen, int blockSize) Parameters buffer Span<byte> The buffer to pad. unpaddedLen int The length of the data before padding. blockSize int The block size to pad to. Returns Span<byte> A span of the padded buffer. Exceptions ArgumentException Thrown when blockSize is less than or equal to 0 or unpaddedLen is greater than buffer length. Unpad(Span<byte>, int) Unpads the given buffer that was padded to a specified block size. public static Span<byte> Unpad(Span<byte> buffer, int blockSize) Parameters buffer Span<byte> The buffer to unpad. blockSize int The block size that was used for padding. Returns Span<byte> A span of the unpadded buffer. Exceptions ArgumentException Thrown when blockSize is less than or equal to 0. SodioException Thrown when unpadding fails."
  },
  "api/LibSodium.Net.SodioException.html": {
    "href": "api/LibSodium.Net.SodioException.html",
    "title": "Class SodioException | LibSodium.Net",
    "summary": "Class SodioException Namespace LibSodium.Net Assembly LibSodium.Net.dll Represents errors that occur during Sodium operations. [Serializable] public class SodioException : InvalidOperationException, ISerializable Inheritance object Exception SystemException InvalidOperationException SodioException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SodioException() Initializes a new instance of the SodioException class. public SodioException() SodioException(string?) Initializes a new instance of the SodioException class with a specified error message. public SodioException(string? message) Parameters message string The error message that explains the reason for the exception. SodioException(string?, Exception?) Initializes a new instance of the SodioException class with a specified error message and a reference to the inner exception that is the cause of this exception. public SodioException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/LibSodium.Net.UnmanagedMemorySpanHolder-1.html": {
    "href": "api/LibSodium.Net.UnmanagedMemorySpanHolder-1.html",
    "title": "Class UnmanagedMemorySpanHolder<T> | LibSodium.Net",
    "summary": "Class UnmanagedMemorySpanHolder<T> Namespace LibSodium.Net Assembly LibSodium.Net.dll Holds the pointer and length of an unmanaged memory span for later recreation. Use only with unmanaged memory. public class UnmanagedMemorySpanHolder<T> where T : unmanaged Type Parameters T The unmanaged type of the span elements. Inheritance object UnmanagedMemorySpanHolder<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class stores the pointer and length of an unmanaged memory span, allowing for its later reconstruction. It is critical to use this class only with spans pointing to unmanaged memory. Using it with managed or stack-allocated spans will result in undefined behavior and potential memory corruption. This holder is particularly useful when a span needs to be accessed in asynchronous operations, lambda expressions, anonymous methods or other contexts with limited scope, such as after awaiting a task. Constructors UnmanagedMemorySpanHolder(ReadOnlySpan<T>) Initializes a new instance of the UnmanagedMemorySpanHolder<T> class from a read-only span. Use only with unmanaged memory. public UnmanagedMemorySpanHolder(ReadOnlySpan<T> span) Parameters span ReadOnlySpan<T> The read-only span pointing to unmanaged memory. Exceptions ArgumentException Thrown when the span is empty. UnmanagedMemorySpanHolder(Span<T>) Initializes a new instance of the UnmanagedMemorySpanHolder<T> class from a writable span. Use only with unmanaged memory. public UnmanagedMemorySpanHolder(Span<T> span) Parameters span Span<T> The read-only span pointing to unmanaged memory. Exceptions ArgumentException Thrown when the span is empty. Methods GetOriginalReadOnlySpan() Creates a new ReadOnlySpan<T> from the held unmanaged memory representing the original ReadOnlySpan<T>. public ReadOnlySpan<T> GetOriginalReadOnlySpan() Returns ReadOnlySpan<T> A ReadOnlySpan<T> representing the original ReadOnlySpan<T> GetOriginalSpan() Creates a new Span<T> from the held unmanaged memory representing the original Span<T> public Span<T> GetOriginalSpan() Returns Span<T> A Span<T> representing the original Span<T> Exceptions InvalidOperationException The original span was read-only, you cannot get a writable span."
  },
  "api/LibSodium.Net.html": {
    "href": "api/LibSodium.Net.html",
    "title": "Namespace LibSodium.Net | LibSodium.Net",
    "summary": "Namespace LibSodium.Net Classes Base64Encoding Provides methods for Base64 encoding and decoding. HexEncoding Provides methods for encoding and decoding hexadecimal strings and byte buffers. LibraryInitializer Static class that manages the initialization and configuration of libsodium. LibraryVersion Provides methods to retrieve the version information of the Sodium library. RandomGenerator Static class for random number generation. SecretBox Provides static methods for authenticated symmetric encryption and decryption using the Sodium secretbox primitives, specifically the XSalsa20 stream cipher and Poly1305 MAC for authentication. These methods offer combined encryption/authentication and detached encryption/authentication, with variations for handling nonces and Message Authentication Codes (MACs) within or separate from the ciphertext. SecureBigUnsignedInteger Provides methods for working with arbitrary large little endian big unsigned integers in a secure way (constant time for a given length) SecureMemory Provides methods for secure memory management using libsodium. These methods help protect sensitive data from being swapped to disk or accessed by other processes. SecureMemory<T> Provides a secure unmanaged memory buffer for unmanaged types, using libsodium for memory protection. This class encapsulates secure memory allocation, read-only protection, and zeroing. SecurePadding Provides methods for padding and unpadding byte buffers to ensure they meet specified block sizes. SodioException Represents errors that occur during Sodium operations. UnmanagedMemorySpanHolder<T> Holds the pointer and length of an unmanaged memory span for later recreation. Use only with unmanaged memory. Enums Base64Variant Represents Base64 encoding variants."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| LibSodium.Net",
    "summary": ""
  },
  "features.html": {
    "href": "features.html",
    "title": "Features | LibSodium.Net",
    "summary": "Features LibSodium.Net is designed to eventually support all of libsodium’s features while offering a modern and efficient approach to cryptographic operations Modern and Efficient Utilizes Span<T> instead of arrays for enhanced performance. Supports Ahead-of-Time (AOT) compilation by leveraging LibraryImport rather than DllImport. Implemented Features Helpers Constant-time equality testing Hexadecimal encoding and decoding. Base64 encoding and decoding Operations for arbitrary-length unsigned numbers. Testing for all-zero values. Pading Pad and unpad data using the ISO/IEC 7816-4 padding algorithm Secure Memory Zeroing memory Locking memory Guarded heap allocations. Generating random data Random UInt32 , including uniform with upper bound. Random buffer generation, including deterministic option. Closing and stirring the random generator Secret-Key Cryptography Authenticatedd encryption (SecretBox) Additional Features Coming soon"
  },
  "guide.html": {
    "href": "guide.html",
    "title": "Guide | LibSodium.Net",
    "summary": "Guide Comming soon"
  },
  "index.html": {
    "href": "index.html",
    "title": "| LibSodium.Net",
    "summary": "Introduction LibSodium.NET is a library that provides .NET bindings for libsodium. It is designed to eventually support all of libsodium’s features while offering a modern and efficient approach to cryptographic operations."
  }
}